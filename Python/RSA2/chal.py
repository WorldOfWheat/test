S_BOX = [
    0xd2, 0x10, 0x5d, 0xb0, 0x7e, 0x1e, 0x78, 0x4a, 0xf5, 0x83, 0x1b, 0xb9, 0x50, 0x1a, 0x0b, 0xe0,
    0x34, 0x32, 0xb2, 0x6d, 0x70, 0xd3, 0xc5, 0x57, 0x21, 0xae, 0x00, 0x03, 0xb3, 0x8e, 0x5e, 0x47,
    0x94, 0xc2, 0x08, 0x68, 0x29, 0x1f, 0xe6, 0x82, 0xf6, 0x5a, 0xca, 0x8f, 0xee, 0x9d, 0xbf, 0x28,
    0x24, 0x8a, 0x02, 0x98, 0x3e, 0xf2, 0x0c, 0x97, 0xf9, 0xd0, 0xe2, 0xb8, 0xcb, 0xc6, 0x66, 0x2a,
    0xf3, 0xbb, 0xc9, 0xd7, 0xcf, 0x9a, 0x69, 0x07, 0x80, 0xcd, 0xa7, 0x20, 0xa6, 0x8b, 0x4c, 0x36,
    0x0f, 0x3a, 0xdf, 0xe8, 0x7d, 0xdd, 0x2e, 0xad, 0x2c, 0xfb, 0x05, 0x3b, 0xf8, 0x3d, 0xed, 0xe4,
    0xfe, 0x3c, 0x01, 0x90, 0xc0, 0x7c, 0x62, 0x4f, 0xec, 0x49, 0xba, 0x6c, 0x9c, 0x1c, 0xd6, 0x06,
    0xab, 0xdb, 0xa8, 0xa5, 0x0e, 0x91, 0x84, 0xe3, 0x18, 0x33, 0x63, 0xf1, 0x0a, 0xa2, 0xfc, 0x11,
    0x64, 0xe9, 0x99, 0x73, 0x27, 0x59, 0x4d, 0xa4, 0xf7, 0xa3, 0xd1, 0xfd, 0x89, 0xc4, 0x8c, 0xd8,
    0x92, 0x7f, 0x43, 0x16, 0x74, 0x35, 0x44, 0x8d, 0xe5, 0xbe, 0x9b, 0x54, 0xef, 0x2f, 0x45, 0x9e,
    0x65, 0x12, 0x87, 0xeb, 0x19, 0x6b, 0xaf, 0x4e, 0x26, 0x72, 0x04, 0x13, 0x6a, 0x67, 0x7b, 0x76,
    0x2d, 0xac, 0x23, 0x5b, 0xce, 0x93, 0x37, 0xc3, 0x85, 0x95, 0x79, 0xde, 0x48, 0x38, 0x31, 0x75,
    0x88, 0x71, 0x6f, 0xbc, 0x9f, 0xda, 0xcc, 0x55, 0xb7, 0xa9, 0x46, 0x39, 0xe7, 0x0d, 0x3f, 0x09,
    0xb1, 0x40, 0xc1, 0xb6, 0xa1, 0xaa, 0x58, 0xe1, 0xb4, 0x51, 0xf4, 0x77, 0x5f, 0x7a, 0xf0, 0x1d,
    0xdc, 0x14, 0xc7, 0x81, 0x30, 0xff, 0xd5, 0xbd, 0x42, 0x56, 0xd9, 0x41, 0xfa, 0x2b, 0xa0, 0xc8,
    0x60, 0x5c, 0x4b, 0xea, 0xd4, 0x22, 0xb5, 0x25, 0x52, 0x15, 0x53, 0x96, 0x86, 0x6e, 0x61, 0x17,
]


def key_round(key1: bytes, key2: bytes) -> bytes:
    key1 = bytearray(key1)
    key2 = bytearray(key2)
    for i in range(12):
        for j in range(16):
            key1[j] ^= S_BOX[key2[(i + j) % 16]]
            key1, key2 = key2, key1
    return key1


def key_derive(key: bytes, rounds: int) -> bytes:
    if rounds == 0:
        result = bytearray(16)
        for i in range(len(key)):
            c = key[i]
            for j in range(16):
                result[(i + j) % 16] ^= c
                c = (c * 13 + 7) % 256
    else:
        key1 = key_derive(key, rounds - 1)
        key2 = key_derive(key1, rounds - 1)
        result = key_round(key1, key2)
    return bytes(result)


def encrypt(plaintext: bytes, key: bytes, rounds: int) -> bytes:
    derived = key_derive(key, rounds)
    ciphertext = bytearray(plaintext)
    for i in range(len(plaintext)):
        ciphertext[i] ^= derived[(i ^ (i >> 4)) % 16]
    return bytes(ciphertext)


if __name__ == '__main__':
    from secret import key, flag

    with open('output.txt', 'w') as output:
        # test the encryption!
        print(encrypt(b'this is a test plaintext', key, 16).hex(), file=output)

        # do the real encryption!
        print(encrypt(flag, key, 16).hex(), file=output)
